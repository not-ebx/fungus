use std::convert::{TryFrom, TryInto};
use fungus_utils::errors::convert_error::ConvertError;

pub enum BodyPart {
    Hair = 0,
    Hat = 1,
    FaceAccessory = 2,
    EyeAccessory = 3,
    Earrings = 4,
    TopOverall = 5,
    Bottom = 6,
    Shoes = 7,
    Gloves = 8,
    Cape = 9,
    Shield = 10,
    Weapon = 11,
    Ring1 = 12,
    Ring2 = 13,
    PetWear1 = 14,
    Ring3 = 15,
    Ring4 = 16,
    Pendant = 17,
    TamingMob = 18,
    Saddle = 19,
    MobEquip = 20,
    Medal = 21,
    Belt = 22,
    Shoulder = 23,
    PetWear2 = 24,
    PetWear3 = 25,
    PocketItem = 26,
    Android_OLD = 27,
    MechanicalHeart_OLD = 28,
    Badge = 29,
    Emblem = 30,
    ExtendedPendant = 31,
    Extended1 = 32,
    Extended2 = 33,
    Extended3 = 34,
    Extended4 = 35,
    Extended5 = 36,
    Extended6 = 37,
    Android = 53,
    MechanicalHeart = 54,
    MonsterBook = 55,
    Sticker = 100,
    //BPEnd = 100,
    CBPBase = 101,
    PetConsumeHPItem = 200,
    PetConsumeMPItem = 201,
    //CBPEnd = 1000,
    //EvanBase = 1000,
    EvanHat = 1000,
    EvanPendant = 1001,
    EvanWing = 1002,
    EvanShoes = 1003,
    EvanEnd = 1004,
    //MechBase = 1100,
    MachineEngine = 1100,
    MachineArm = 1101,
    MachineLeg = 1102,
    MachineFrame = 1103,
    MachineTransistor = 1104,
    MechEnd = 1105,
    //APBase = 1200,
    APHat = 1200,
    APCape = 1201,
    APFaceAccessory = 1202,
    //APTop = 1203,
    APTopOverall = 1203,
    APBottom = 1204,
    APShoes = 1205,
    APGloves = 1206,
    APEnd = 1207,
    //DUBase = 1300,
    DUHat = 1300,
    DUCape = 1301,
    DUFaceAccessory = 1302,
    //DUTop = 1303,
    DUTopOverall = 1303,
    DUGloves = 1304,
    DUEnd = 1305,
    BitsBase = 1400,
    BitsEnd = 1425,
    Totem1 = 5000,
    Totem2 = 5001,
    Totem3 = 5002,
    Totem4 = 5003,
    TotemEnd = 5004,
    MBPBase = 5100,
    MBPHat = 5101,
    MBPCape = 5102,
    MBPTopOverall = 5103,
    MBPGloves = 5104,
    MBPShoes = 5105,
    MBPWeapon = 5106,
    MBPEnd = 5107,
    SlotIndexNotDefined = 15440,
}

#[derive(Debug, PartialEq, Eq)]
pub enum EquipPrefix {
    Hat = 100,
    FaceAccessory = 101,
    EyeAccessory = 102,
    Earrings = 103,
    Top = 104,
    Overall = 105,
    Bottom = 106,
    Shoes = 107,
    Gloves = 108,
    Shield = 109,
    Cape = 110,
    Ring = 111,
    Pendant = 112,
    Belt = 113,
    Medal = 114,
    Shoulder = 115,
    PocketItem = 116,
    MonsterBook = 117,
    Badge = 118,
    Emblem = 119,
    Totem = 120,
    ShiningRod = 121,
    SoulShooter = 122,
    Desperado = 123,
    WhipBlade = 124,
    Scepter = 125,
    PsyLimiter = 126,
    Chain = 127,
    Gauntlet = 128,
    OneHandedSword = 130,
    OneHandedAxe = 131,
    OneHandedBluntWeapon = 132,
    Dagger = 133,
    Katara = 134,
    SecondaryWeapon = 135,
    Cane = 136,
    Wand = 137,
    Staff = 138,
    TwoHandedSword = 140,
    TwoHandedAxe = 141,
    TwoHandedBluntWeapon = 142,
    Spear = 143,
    PoleArm = 144,
    Bow = 145,
    Crossbow = 146,
    Claw = 147,
    Knuckle = 148,
    Gun = 149,
    Shovel = 150,
    Pickaxe = 151,
    DualBowguns = 152,
    Cannon = 153,
    Katana = 154,
    Fan = 155,
    Lapis = 156,
    Lazuli = 157,
    ArmCannon = 158,
    SkillEffect = 160,
    MachineEngine = 161,
    MachineArm = 162,
    MachineLeg = 163,
    MachineFrame = 164,
    MachineTransistor = 165,
    Android = 166,
    MechanicalHeart = 167,
    Bit = 168,
    PetWear = 180,
    TamingMob = 190,
    Saddle = 191,
    EvanHat = 194,
    EvanPendant = 195,
    EvanWing = 196,
    EvanShoes = 197,
}

impl TryFrom<i32> for EquipPrefix {
    type Error = ConvertError;

    fn try_from(value: i32) -> Result<Self, Self::Error> {
        match value {
            100 => Ok(EquipPrefix::Hat),
            101 => Ok(EquipPrefix::FaceAccessory),
            102 => Ok(EquipPrefix::EyeAccessory),
            103 => Ok(EquipPrefix::Earrings),
            104 => Ok(EquipPrefix::Top),
            105 => Ok(EquipPrefix::Overall),
            106 => Ok(EquipPrefix::Bottom),
            107 => Ok(EquipPrefix::Shoes),
            108 => Ok(EquipPrefix::Gloves),
            109 => Ok(EquipPrefix::Shield),
            110 => Ok(EquipPrefix::Cape),
            111 => Ok(EquipPrefix::Ring),
            112 => Ok(EquipPrefix::Pendant),
            113 => Ok(EquipPrefix::Belt),
            114 => Ok(EquipPrefix::Medal),
            115 => Ok(EquipPrefix::Shoulder),
            116 => Ok(EquipPrefix::PocketItem),
            117 => Ok(EquipPrefix::MonsterBook),
            118 => Ok(EquipPrefix::Badge),
            119 => Ok(EquipPrefix::Emblem),
            120 => Ok(EquipPrefix::Totem),
            121 => Ok(EquipPrefix::ShiningRod),
            122 => Ok(EquipPrefix::SoulShooter),
            123 => Ok(EquipPrefix::Desperado),
            124 => Ok(EquipPrefix::WhipBlade),
            125 => Ok(EquipPrefix::Scepter),
            126 => Ok(EquipPrefix::PsyLimiter),
            127 => Ok(EquipPrefix::Chain),
            128 => Ok(EquipPrefix::Gauntlet),
            130 => Ok(EquipPrefix::OneHandedSword),
            131 => Ok(EquipPrefix::OneHandedAxe),
            132 => Ok(EquipPrefix::OneHandedBluntWeapon),
            133 => Ok(EquipPrefix::Dagger),
            134 => Ok(EquipPrefix::Katara),
            135 => Ok(EquipPrefix::SecondaryWeapon),
            136 => Ok(EquipPrefix::Cane),
            137 => Ok(EquipPrefix::Wand),
            138 => Ok(EquipPrefix::Staff),
            140 => Ok(EquipPrefix::TwoHandedSword),
            141 => Ok(EquipPrefix::TwoHandedAxe),
            142 => Ok(EquipPrefix::TwoHandedBluntWeapon),
            143 => Ok(EquipPrefix::Spear),
            144 => Ok(EquipPrefix::PoleArm),
            145 => Ok(EquipPrefix::Bow),
            146 => Ok(EquipPrefix::Crossbow),
            147 => Ok(EquipPrefix::Claw),
            148 => Ok(EquipPrefix::Knuckle),
            149 => Ok(EquipPrefix::Gun),
            150 => Ok(EquipPrefix::Shovel),
            151 => Ok(EquipPrefix::Pickaxe),
            152 => Ok(EquipPrefix::DualBowguns),
            153 => Ok(EquipPrefix::Cannon),
            154 => Ok(EquipPrefix::Katana),
            155 => Ok(EquipPrefix::Fan),
            156 => Ok(EquipPrefix::Lapis),
            157 => Ok(EquipPrefix::Lazuli),
            158 => Ok(EquipPrefix::ArmCannon),
            160 => Ok(EquipPrefix::SkillEffect),
            161 => Ok(EquipPrefix::MachineEngine),
            162 => Ok(EquipPrefix::MachineArm),
            163 => Ok(EquipPrefix::MachineLeg),
            164 => Ok(EquipPrefix::MachineFrame),
            165 => Ok(EquipPrefix::MachineTransistor),
            166 => Ok(EquipPrefix::Android),
            167 => Ok(EquipPrefix::MechanicalHeart),
            168 => Ok(EquipPrefix::Bit),
            180 => Ok(EquipPrefix::PetWear),
            190 => Ok(EquipPrefix::TamingMob),
            191 => Ok(EquipPrefix::Saddle),
            194 => Ok(EquipPrefix::EvanHat),
            195 => Ok(EquipPrefix::EvanPendant),
            196 => Ok(EquipPrefix::EvanWing),
            197 => Ok(EquipPrefix::EvanShoes),
            _ => Err(ConvertError::UnknownValue(String::from("Unknown value"))),
        }
    }
}

impl EquipPrefix {
    pub fn get_val(self) -> i32 {
        self as i32
    }
}


pub fn get_item_prefix(id: i32) -> i32 {
    return id / 10_000;
}

pub fn is_equipment(id: i32) -> bool {
    return id / 1_000_000 == 1;
}

pub fn is_weapon(id: i32) -> bool {
    return id >= 1210000 && id < 1600000;
}

pub fn get_body_part_from_item(item_id: i32) -> Option<BodyPart> {
    let prefix_res = EquipPrefix::try_from(get_item_prefix(item_id));
    if let Err(_) = prefix_res {
        return None
    }

    let prefix = prefix_res.unwrap();
    match prefix {
        EquipPrefix::Hat => Some(BodyPart::Hat),
        EquipPrefix::FaceAccessory => Some(BodyPart::FaceAccessory),
        EquipPrefix::EyeAccessory => Some(BodyPart::EyeAccessory),
        EquipPrefix::Earrings => Some(BodyPart::Earrings),
        EquipPrefix::Top | EquipPrefix::Overall => Some(BodyPart::TopOverall),
        EquipPrefix::Bottom => Some(BodyPart::Bottom),
        EquipPrefix::Shoes => Some(BodyPart::Shoes),
        EquipPrefix::Gloves => Some(BodyPart::Gloves),
        EquipPrefix::Shield => Some(BodyPart::Shield),
        EquipPrefix::Cape => Some(BodyPart::Cape),
        EquipPrefix::Ring => Some(BodyPart::Ring1), // TODO gotta heck this lol
        EquipPrefix::Pendant => Some(BodyPart::Pendant),
        EquipPrefix::Belt => Some(BodyPart::Belt),
        EquipPrefix::Medal => Some(BodyPart::Medal),
        EquipPrefix::Shoulder => Some(BodyPart::Shoulder),
        EquipPrefix::PocketItem => Some(BodyPart::PocketItem),
        EquipPrefix::MonsterBook => Some(BodyPart::MonsterBook),
        EquipPrefix::Badge => Some(BodyPart::Badge),
        EquipPrefix::Emblem => Some(BodyPart::Emblem),
        EquipPrefix::Totem => Some(BodyPart::Totem1),// TODO chec this too
        _ => {
            if is_weapon(item_id) {
                Some(BodyPart::Weapon)
            } else {
                None
            }
        }
    }
}